{"version":3,"sources":["component/Header/Header.js","store/action/campaignAction.js","store/actionConstant.js","component/CampaignList/CampaignDetail/CampaignDetail.js","component/CampaignList/CampaignPricing/CampaignPricing.js","component/CampaignList/CampaignList.js","App.js","serviceWorker.js","store/reducer/campaignReducer.js","store/reducer/index.js","store/configureStore.js","index.js"],"names":["Header","className","src","process","alt","Component","getCampaignListData","campaignReducerData","retObj","campaignList","campaignLSData","todatDate","Date","setHours","campaignType","filter","campaign","campaignDate","createdOn","toString","setSelectedCampaign","campaignDetail","dispatch","type","payload","CampaignDetail","moment","this","props","format","fromNow","image_url","name","region","href","onClick","connect","CampaignPricing","id","selectedCampaign","price","map","index","key","label","value","align","setSelectedCampaignToNull","CampaignList","changeTab","event","target","dataset","updateCampaignType","state","redirect","getCampaignList","data-type","campaignReducer","getState","localStorage","getItem","dataToUpdateLocalStorage","i","campaigns","data","length","campaignObj","push","setItem","JSON","stringify","App","Fragment","path","exact","strict","render","Boolean","window","location","hostname","match","initialState","parse","action","newState","rootReducer","combineReducers","configureStore","createStore","applyMiddleware","thunk","logger","ReactDOM","store","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0110ca40.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Header.scss';\n\nclass Header extends Component {\n\n    render() {\n        return (\n            <div className=\"header\">\n                <div></div>\n                <div>\n                    <img src={process.env.PUBLIC_URL + '/new-logo-white.png'} className=\"logo\" alt=\"header logo\"/>\n                </div>\n                <div></div>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import {GET_CAMPAIGN_LIST, UPDATE_CAMPAIGN_TYPE, SET_SELECTED_CAMPAIGN} from \"../actionConstant\";\nimport campaigns from '../campaign';\n\nconst getCampaignListData = (campaignReducerData) => {\n    const retObj = {\n        campaignList: campaignReducerData.campaignLSData\n    }\n    const todatDate = new Date();\n    todatDate.setHours(0,0,0,0);\n    switch (campaignReducerData.campaignType) {\n        case \"UPCOMING\":\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate < campaignDate;\n            });\n            break;\n\n        case \"LIVE\":\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate.toString() === campaignDate.toString();\n            });\n            break;\n\n        case \"PAST\":\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate > campaignDate;\n            });\n            break;\n        default:\n            return true;\n\n    }\n    return retObj;\n}\n\nexport const getCampaignList = () => {\n    return (dispatch, getState) => {\n        if (!localStorage.getItem('campaignList')) {\n            const dataToUpdateLocalStorage = [];\n            for(let i=0; i<campaigns.data.length; i++) {\n                const campaignObj = campaigns.data[i];\n                dataToUpdateLocalStorage.push(campaignObj);\n            }\n            localStorage.setItem('campaignList', JSON.stringify(dataToUpdateLocalStorage));\n        }\n        const campaignReducerData = getState().campaignReducer;\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\nexport const updateCampaignType = (campaignType) => {\n    return (dispatch, getState) => {\n        dispatch({type: UPDATE_CAMPAIGN_TYPE, payload: campaignType});\n        const campaignReducerData = getState().campaignReducer;\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\nexport const setSelectedCampaign = (campaignDetail) => {\n    return (dispatch) => {\n        dispatch({type: SET_SELECTED_CAMPAIGN, payload: campaignDetail});\n    }\n}\n\n\n\n","export const GET_CAMPAIGN_LIST = 'GET_USER_LIST';\nexport const UPDATE_CAMPAIGN_TYPE = 'UPDATE_CAMPAIGN_TYPE';\nexport const SET_SELECTED_CAMPAIGN = 'SET_SELECTED_CAMPAIGN';","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {setSelectedCampaign} from './../../../store/action/campaignAction';\n\nimport './CampaignDetail.scss';\nimport moment from \"moment\";\n\nclass CampaignDetail extends Component{\n\n    render() {\n        return (\n            <div className=\"list-row\">\n                <div></div>\n                <div className=\"list-data\">\n                    <div>\n                        <p>{moment(this.props.campaignDetail.createdOn).format('MMM YYYY, DD')}</p>\n                        <small>{moment(this.props.campaignDetail.createdOn).fromNow()}</small>\n                    </div>\n                    <div className=\"campaign-name\">\n                        <div><img src={process.env.PUBLIC_URL +'/' + this.props.campaignDetail.image_url} alt={this.props.campaignDetail.name} /></div>\n                        <div>\n                            <p>{this.props.campaignDetail.name}</p>\n                            <p><small>{this.props.campaignDetail.region}</small></p>\n                        </div>\n\n\n                    </div>\n                    <div>\n                        <a href onClick={() => this.props.setSelectedCampaign(this.props.campaignDetail)}>\n                            <img src={process.env.PUBLIC_URL + '/price.png'} className=\"img\" alt={this.props.campaignDetail.name}/>\n                            <span>View Price </span>\n                        </a>\n                    </div>\n                    <div>\n                        <a href>\n                            <img src={process.env.PUBLIC_URL + '/file.png'} className=\"img\" alt={this.props.campaignDetail.name} />\n                            <span>CSV</span>\n                        </a>\n                        <a href>\n                            <img src={process.env.PUBLIC_URL + '/statistics-report.png'} className=\"img\" alt={this.props.campaignDetail.name} />\n                            <span>Report</span>\n                        </a>\n                        <a href>\n                            <img src={process.env.PUBLIC_URL + '/calendar.png'} className=\"img\" alt={this.props.campaignDetail.name} />\n                            <span>Schedule Again</span>\n                        </a>\n                    </div>\n                </div>\n                <div></div>\n\n            </div>\n        );\n    }\n}\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        setSelectedCampaign: (campaignDetail) => dispatch(setSelectedCampaign(campaignDetail))\n    }\n}\n\nexport default connect(null, mapActionToDispatch)(CampaignDetail);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './CampaignPricing.scss';\nimport {setSelectedCampaign} from './../../../store/action/campaignAction';\n\nclass CampaignPricing extends Component {\n\n    render() {\n        return (\n            <div id=\"myModal\" className=\"modal\">\n\n                <div className=\"modal-content\">\n                    <div className=\"compain-heading\">\n                        <div><img src={process.env.PUBLIC_URL + '/' +  this.props.selectedCampaign.image_url} alt=\"Campaign Img\"/></div>\n                        <div>\n                            <p>{this.props.selectedCampaign.name}</p>\n                            <small>{this.props.selectedCampaign.region}</small>\n                        </div>\n                    </div>\n                    <h1>Pricing</h1>\n                    {\n                        this.props.selectedCampaign.price.map( (price, index) => (\n                            <div className=\"pricing\" key={index}>\n                                <div>{price.label}</div>\n                                <div>{price.value}</div>\n                            </div>\n                        ))\n                    }\n                    <div align=\"center\">\n                        <button type=\"button\" className=\"btn\" onClick={this.props.setSelectedCampaignToNull}>Close</button>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        setSelectedCampaignToNull: () => dispatch(setSelectedCampaign(null))\n    };\n}\n\nexport default connect(null, mapActionToDispatch)(CampaignPricing);","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport './CampaignList.scss';\nimport {getCampaignList, updateCampaignType} from \"../../store/action/campaignAction\";\nimport CampaignDetail from \"./CampaignDetail/CampaignDetail\";\nimport CampaignPricing from \"./CampaignPricing/CampaignPricing\";\n\nclass CampaignList extends Component {\n    constructor() {\n        super();\n        this.state = {\n            redirect: false,\n            id: ''\n        };\n    }\n    componentDidMount() {\n        this.props.getCampaignList();\n    }\n\n    changeTab = (event) => {\n        if (event.target.dataset.type) {\n            this.props.updateCampaignType(event.target.dataset.type);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"campaign-container\">\n                <div></div>\n                <div>\n                    <div className=\"title\">\n                        <h1>Manage Campaigns</h1>\n                    </div>\n                    <div className=\"tab-container\" onClick={this.changeTab}>\n                        <div className={`tab-item ' ${this.props.campaignType ===  'UPCOMING' ? 'active' :''}`}\n                             data-type=\"UPCOMING\">\n                            <a href className={this.props.campaignType ===  'UPCOMING' ? 'active' :''} data-type=\"UPCOMING\">Upcoming Campaigns</a>\n                        </div>\n                        <div className={`tab-item ' ${this.props.campaignType ===  'LIVE' ? 'active' :''}`}\n                             data-type=\"LIVE\">\n                            <a href className={this.props.campaignType ===  'LIVE' ? 'active' :''} data-type=\"LIVE\">Live Campaigns</a>\n                        </div>\n                        <div className={`tab-item ' ${this.props.campaignType ===  'PAST' ? 'active' :''}`}\n                             data-type=\"PAST\">\n                            <a href className={this.props.campaignType ===  'PAST' ? 'active' :''} data-type=\"PAST\">Past Campaigns</a>\n                        </div>\n                    </div>\n                    <div className=\"data-container\">\n                        <div className=\"list-caption\">\n                            <div>DATE</div>\n                            <div>CAMPAIGN</div>\n                            <div>VIEW</div>\n                            <div>ACTIONS</div>\n                        </div>\n                        {\n                            this.props.campaignList.map( (campaign, index) => (\n                            <CampaignDetail campaignDetail = {campaign} key={index} />\n                            ))\n                        }\n                        {\n                            this.props.selectedCampaign ? (<CampaignPricing selectedCampaign={this.props.selectedCampaign}></CampaignPricing>) : ''\n                        }\n                    </div>\n                </div>\n                <div></div>\n            </div>\n        )\n    }\n}\n\nconst mapPropsToDispatch = (state) => {\n    return {\n        campaignList: state.campaignReducer.campaignList,\n        campaignType: state.campaignReducer.campaignType,\n        selectedCampaign: state.campaignReducer.selectedCampaign\n    }\n}\n\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        getCampaignList: () => dispatch(getCampaignList()),\n        updateCampaignType: (campaignType) => dispatch(updateCampaignType(campaignType))\n    }\n}\n\nexport default connect(mapPropsToDispatch, mapActionToDispatch)(CampaignList);","import React from 'react';\nimport './App.scss';\nimport {Route} from 'react-router-dom';\nimport Header from './component/Header/Header';\nimport CampaignList from \"./component/CampaignList/CampaignList\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n        <Header></Header>\n          <Route path='/' exact strict render={() => {\n              return (<CampaignList/>)\n          }}/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {GET_CAMPAIGN_LIST, SET_SELECTED_CAMPAIGN, UPDATE_CAMPAIGN_TYPE} from \"../actionConstant\";\n\nconst initialState = {\n    campaignList: [],\n    campaignType: 'UPCOMING',\n    selectedCampaign: null,\n    campaignLSData: JSON.parse(localStorage.getItem('campaignList'))\n};\n\nconst campaignReducer = (state = initialState, action) => {\n    const newState = {...state};\n\n    switch (action.type) {\n        case GET_CAMPAIGN_LIST:\n            return {\n                ...state,\n                campaignList: action.payload.campaignList\n\n            }\n\n        case UPDATE_CAMPAIGN_TYPE:\n            return {\n                ...state,\n                campaignType: action.payload\n            }\n\n        case SET_SELECTED_CAMPAIGN:\n            return {\n                ...state,\n                selectedCampaign: action.payload\n            }\n\n        default:\n            return newState;\n    }\n}\n\nexport default campaignReducer;","import {combineReducers} from \"redux\";\nimport campaignReducer from \"./campaignReducer\";\n\nconst rootReducer = combineReducers({\n    campaignReducer: campaignReducer\n});\n\nexport default rootReducer;","import {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {logger} from 'redux-logger';\nimport rootReducer from \"./reducer\";\n\nconst configureStore = () => {\n    const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n    return store;\n}\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport configureStore from \"./store/configureStore\";\n\nReactDOM.render(<Provider store={configureStore()}><Router basename={process.env.PUBLIC_URL}><App  /></Router></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}