{"version":3,"sources":["store/actionConstant.js","store/action/campaignAction.js","component/Header/Header.js","component/CampaignList/CampaignDetail/CampaignDetail.js","component/CampaignList/CampaignPricing/CampaignPricing.js","component/CampaignList/CampaignList.js","App.js","serviceWorker.js","store/reducer/campaignReducer.js","i18n.js","store/reducer/localizationReducer.js","store/reducer/index.js","store/configureStore.js","index.js"],"names":["CAMPAIGN_TYPE","getCampaignListData","campaignReducerData","retObj","campaignList","campaignLSData","campaigns","data","todatDate","Date","setHours","campaignType","filter","campaign","campaignDate","createdOn","toString","setSelectedCampaign","campaignDetail","dispatch","type","payload","Header","changeLanguage","event","props","target","value","this","getUser","className","src","process","alt","onChange","Component","connect","language","fetch","then","json","res","CampaignDetail","state","startDate","handleChange","date","scheduleAgain","id","moment","format","fromNow","image_url","name","region","href","onClick","translation","view_price","CSV","report","customInput","schedule_again","localizationReducer","getState","campaignReducer","dataToUpdateLocalStorage","i","length","localStorage","setItem","JSON","stringify","CampaignPricing","selectedCampaign","pricing","price","map","index","key","label","align","setSelectedCampaignToNull","close","CampaignList","changeTab","dataset","updateCampaignType","getCampaignList","manage_capaign","data-type","upcoming_capaign","live_capaign","past_capaign","DATE","CAMPAIGN","VIEW","ACTIONS","getItem","campaignObj","push","App","Fragment","path","exact","strict","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","parse","userList","action","newState","en","ger","rootReducer","combineReducers","configureStore","createStore","applyMiddleware","thunk","logger","ReactDOM","store","basename","document","getElementById","URL","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.70f566c4.chunk.js","sourcesContent":["export const GET_CAMPAIGN_LIST = 'GET_USER_LIST';\nexport const UPDATE_CAMPAIGN_TYPE = 'UPDATE_CAMPAIGN_TYPE';\nexport const SET_SELECTED_CAMPAIGN = 'SET_SELECTED_CAMPAIGN';\nexport const CHANGE_LANGUAGE = 'CHANGE_LANGUAGE';\nexport const GET_USER = 'GET_USER';\nexport const CAMPAIGN_TYPE = {\n    UPCOMING: 'UPCOMING',\n    LIVE: 'LIVE',\n    PAST: 'PAST',\n};","import {GET_CAMPAIGN_LIST, UPDATE_CAMPAIGN_TYPE, SET_SELECTED_CAMPAIGN, CAMPAIGN_TYPE, GET_USER} from \"src/store/actionConstant\";\nimport campaigns from 'src/store/campaign';\n/*\n    Return data based on campaign Type(Upcoming, live and past) and will trigger when user switch tabs\n    Upcoming: In case of Upcoming, It will return all the record with createdOn date is greater than today date\n    Live: In case of Live, It will return all the record with createdOn date is equal to today date\n    Past: In case of Past, It will return all the record with createdOn date is less than today date\n */\nconst getCampaignListData = (campaignReducerData) => {\n    const retObj = {\n        campaignList: campaignReducerData.campaignLSData ? campaignReducerData.campaignLSData : campaigns.data\n    }\n    const todatDate = new Date();\n    todatDate.setHours(0,0,0,0);\n    switch (campaignReducerData.campaignType) {\n        case CAMPAIGN_TYPE.UPCOMING:\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate < campaignDate;\n            });\n            break;\n\n        case CAMPAIGN_TYPE.LIVE:\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate.toString() === campaignDate.toString();\n            });\n            break;\n\n        case CAMPAIGN_TYPE.PAST:\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate > campaignDate;\n            });\n            break;\n        default:\n            return true;\n\n    }\n    return retObj;\n}\n\n/*\n    Called first time when user reloads the browser\n */\nexport const getCampaignList = () => {\n    return (dispatch, getState) => {\n        if (!localStorage.getItem('campaignList')) {\n            const dataToUpdateLocalStorage = [];\n            for(let i=0; i<campaigns.data.length; i++) {\n                const campaignObj = campaigns.data[i];\n                dataToUpdateLocalStorage.push(campaignObj);\n            }\n            localStorage.setItem('campaignList', JSON.stringify(dataToUpdateLocalStorage));\n        }\n        const campaignReducerData = getState().campaignReducer;\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\n/*\n    Called when when user switch the tabs\n */\nexport const updateCampaignType = (campaignType) => {\n    return (dispatch, getState) => {\n        dispatch({type: UPDATE_CAMPAIGN_TYPE, payload: campaignType});\n        const campaignReducerData = getState().campaignReducer;\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\n/*\n    Called when user re-schedule campaign using calander\n */\nexport const scheduleAgain = (id, date) => {\n    return (dispatch, getState) => {\n        const campaignReducerData = getState().campaignReducer;\n\n        const dataToUpdateLocalStorage = campaignReducerData.campaignLSData ? campaignReducerData.campaignLSData : campaigns.data;\n        for(let i=0; i<dataToUpdateLocalStorage.length; i++) {\n            if (id === dataToUpdateLocalStorage[i].id) {\n                dataToUpdateLocalStorage[i].createdOn = date;\n            }\n        }\n        localStorage.setItem('campaignList', JSON.stringify(dataToUpdateLocalStorage));\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\n/*\n    Called when user click on View Price link to see pricing details\n */\nexport const setSelectedCampaign = (campaignDetail) => {\n    return (dispatch) => {\n        dispatch({type: SET_SELECTED_CAMPAIGN, payload: campaignDetail});\n    }\n}\n\nexport const getUser = () => {\n    return (dispatch) => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(json => json.json())\n        .then(res => {\n            dispatch({type: GET_USER, payload: res});\n        })\n\n    }\n}\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport 'src/component/Header/Header.scss';\nimport {CHANGE_LANGUAGE} from \"src/store/actionConstant\";\nimport {getUser} from \"src/store/action/campaignAction\";\n\nclass Header extends Component {\n\n    componentDidMount() {\n        this.props.getUser();\n    }\n\n    changeLanguage = (event) => {\n        this.props.changeLanguage(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"header\">\n                <div></div>\n                <div>\n                    <img src={process.env.PUBLIC_URL + '/new-logo-white.png'} className=\"logo\" alt=\"header logo\"/>\n                </div>\n                <div className=\"pt-5\">\n                    <select onChange={this.changeLanguage}>\n                        <option value=\"en\">English</option>\n                        <option value=\"ger\">German</option>\n                    </select>\n                </div>\n                <div></div>\n            </div>\n        );\n    }\n}\n\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        changeLanguage: (language) => dispatch({type: CHANGE_LANGUAGE, payload: language}),\n        getUser: () => dispatch(getUser())\n    }\n}\n\nexport default connect(null, mapActionToDispatch)(Header);\n","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {setSelectedCampaign, scheduleAgain} from 'src/store/action/campaignAction';\n\nimport 'src/component/CampaignList/CampaignDetail/CampaignDetail.scss';\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass CampaignDetail extends Component{\n\n    state = {\n        startDate: new Date()\n    };\n\n    handleChange = date => {\n        this.props.scheduleAgain(this.props.campaignDetail.id, date);\n    };\n\n    render() {\n        const ExampleCustomInput = ({ onClick }) => (\n            <button onClick={onClick}>\n                <a href>\n                    <img src={process.env.PUBLIC_URL + '/calendar.png'} className=\"img\" alt={this.props.campaignDetail.name} />\n                    <span>{this.props.translation.schedule_again}</span>\n\n                </a>\n            </button>\n        );\n        return (\n            <div className=\"list-row\">\n                <div></div>\n                <div className=\"list-data\">\n                    <div>\n                        <p>{moment(this.props.campaignDetail.createdOn).format('MMM YYYY, DD')}</p>\n                        <small>{moment(this.props.campaignDetail.createdOn).fromNow()}</small>\n                    </div>\n                    <div className=\"campaign-name\">\n                        <div><img src={process.env.PUBLIC_URL +'/' + this.props.campaignDetail.image_url} alt={this.props.campaignDetail.name} /></div>\n                        <div>\n                            <p>{this.props.campaignDetail.name}</p>\n                            <p><small>{this.props.campaignDetail.region}</small></p>\n                        </div>\n\n\n                    </div>\n                    <div>\n                        <a href onClick={() => this.props.setSelectedCampaign(this.props.campaignDetail)}>\n                            <img src={process.env.PUBLIC_URL + '/price.png'} className=\"img\" alt={this.props.campaignDetail.name}/>\n                            <span>{this.props.translation.view_price} </span>\n                        </a>\n                    </div>\n                    <div>\n                        <a href>\n                            <img src={process.env.PUBLIC_URL + '/file.png'} className=\"img\" alt={this.props.campaignDetail.name} />\n                            <span>{this.props.translation.CSV}</span>\n                        </a>\n                        <a href>\n                            <img src={process.env.PUBLIC_URL + '/statistics-report.png'} className=\"img\" alt={this.props.campaignDetail.name} />\n                            <span>{this.props.translation.report}</span>\n                        </a>\n                        {/*<a href>*/}\n                        {/*    <img src={process.env.PUBLIC_URL + '/calendar.png'} className=\"img\" alt={this.props.campaignDetail.name} />*/}\n                        {/*    <span>{this.props.translation.schedule_again}</span>*/}\n\n                        {/*</a>*/}\n                        <DatePicker\n                            onChange={this.handleChange}\n                            customInput={<ExampleCustomInput />}\n                        />\n\n                    </div>\n                </div>\n                <div></div>\n\n            </div>\n        );\n    }\n}\n\nconst mapPropsToDispatch = (state) => {\n    return {\n        translation: state.localizationReducer.translation\n    }\n}\n\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        setSelectedCampaign: (campaignDetail) => dispatch(setSelectedCampaign(campaignDetail)),\n        scheduleAgain: (id, date) => dispatch(scheduleAgain(id, date))\n    }\n}\n\nexport default connect(mapPropsToDispatch, mapActionToDispatch)(CampaignDetail);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport 'src/component/CampaignList/CampaignPricing/CampaignPricing.scss';\nimport {setSelectedCampaign} from 'src/store/action/campaignAction';\n\nclass CampaignPricing extends Component {\n\n    render() {\n        return (\n            <div id=\"myModal\" className=\"modal\">\n\n                <div className=\"modal-content\">\n                    <div className=\"compain-heading\">\n                        <div><img src={process.env.PUBLIC_URL + '/' +  this.props.selectedCampaign.image_url}\n                                  alt={this.props.selectedCampaign.name}/></div>\n                        <div>\n                            <p>{this.props.selectedCampaign.name}</p>\n                            <small>{this.props.selectedCampaign.region}</small>\n                        </div>\n                    </div>\n                    <h1>{this.props.translation.pricing}</h1>\n                    {\n                        this.props.selectedCampaign.price.map( (price, index) => (\n                            <div className=\"pricing\" key={index}>\n                                <div>{price.label}</div>\n                                <div>{price.value}</div>\n                            </div>\n                        ))\n                    }\n                    <div align=\"center\">\n                        <button type=\"button\" className=\"btn\" onClick={this.props.setSelectedCampaignToNull}>\n                            {this.props.translation.close}\n                        </button>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nconst mapPropsToDispatch = (state) => {\n    return {\n        translation: state.localizationReducer.translation\n    }\n}\n\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        setSelectedCampaignToNull: () => dispatch(setSelectedCampaign(null))\n    };\n}\n\nexport default connect(mapPropsToDispatch, mapActionToDispatch)(CampaignPricing);","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport 'src/component/CampaignList/CampaignList.scss';\nimport {getCampaignList, updateCampaignType} from \"src/store/action/campaignAction\";\nimport CampaignDetail from \"src/component/CampaignList/CampaignDetail/CampaignDetail\";\nimport CampaignPricing from \"src/component/CampaignList/CampaignPricing/CampaignPricing\";\n\nclass CampaignList extends Component {\n    constructor() {\n        super();\n    }\n\n    componentDidMount() {\n        this.props.getCampaignList();\n    }\n\n    changeTab = (event) => {\n        if (event.target.dataset.type) {\n            this.props.updateCampaignType(event.target.dataset.type);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"campaign-container\">\n                <div></div>\n                <div>\n                    <div className=\"title\">\n                        <h1>{this.props.translation.manage_capaign}</h1>\n                    </div>\n                    <div className=\"tab-container\" onClick={this.changeTab}>\n                        <div className={`tab-item ' ${this.props.campaignType ===  'UPCOMING' ? 'active' :''}`}\n                             data-type=\"UPCOMING\">\n                            <a href className={this.props.campaignType ===  'UPCOMING' ? 'active' :''} data-type=\"UPCOMING\">\n                                {this.props.translation.upcoming_capaign}\n                            </a>\n                        </div>\n                        <div className={`tab-item ' ${this.props.campaignType ===  'LIVE' ? 'active' :''}`}\n                             data-type=\"LIVE\">\n                            <a href className={this.props.campaignType ===  'LIVE' ? 'active' :''} data-type=\"LIVE\">\n                                {this.props.translation.live_capaign}\n                            </a>\n                        </div>\n                        <div className={`tab-item ' ${this.props.campaignType ===  'PAST' ? 'active' :''}`}\n                             data-type=\"PAST\">\n                            <a href className={this.props.campaignType ===  'PAST' ? 'active' :''} data-type=\"PAST\">\n                                {this.props.translation.past_capaign}\n                            </a>\n                        </div>\n                    </div>\n                    <div className=\"data-container\">\n                        <div className=\"list-caption\">\n                            <div>{this.props.translation.DATE}</div>\n                            <div>{this.props.translation.CAMPAIGN}</div>\n                            <div>{this.props.translation.VIEW}</div>\n                            <div>{this.props.translation.ACTIONS}</div>\n                        </div>\n                        {\n                            this.props.campaignList.map( (campaign, index) => (\n                            <CampaignDetail campaignDetail = {campaign} key={index} />\n                            ))\n                        }\n                        {\n                            this.props.selectedCampaign ? (<CampaignPricing selectedCampaign={this.props.selectedCampaign}></CampaignPricing>) : ''\n                        }\n                    </div>\n                </div>\n                <div></div>\n            </div>\n        )\n    }\n}\n\nconst mapPropsToDispatch = (state) => {\n    return {\n        campaignList: state.campaignReducer.campaignList,\n        campaignType: state.campaignReducer.campaignType,\n        selectedCampaign: state.campaignReducer.selectedCampaign,\n        translation: state.localizationReducer.translation\n    }\n}\n\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        getCampaignList: () => dispatch(getCampaignList()),\n        updateCampaignType: (campaignType) => dispatch(updateCampaignType(campaignType))\n    }\n}\n\nexport default connect(mapPropsToDispatch, mapActionToDispatch)(CampaignList);","import React from 'react';\nimport './App.scss';\nimport {Route} from 'react-router-dom';\nimport Header from './component/Header/Header';\nimport CampaignList from \"./component/CampaignList/CampaignList\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n        <Header></Header>\n          <Route path='/' exact strict render={() => {\n              return (<CampaignList/>)\n          }}/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {GET_CAMPAIGN_LIST, SET_SELECTED_CAMPAIGN, UPDATE_CAMPAIGN_TYPE, CAMPAIGN_TYPE, GET_USER} from \"src/store/actionConstant\";\n\nconst initialState = {\n    campaignList: [],\n    campaignType: CAMPAIGN_TYPE.UPCOMING,\n    selectedCampaign: null,\n    campaignLSData: JSON.parse(localStorage.getItem('campaignList')),\n    userList: []\n};\n\nconst campaignReducer = (state = initialState, action) => {\n    const newState = {...state};\n\n    switch (action.type) {\n        case GET_CAMPAIGN_LIST:\n            return {\n                ...state,\n                campaignList: action.payload.campaignList\n\n            }\n\n        case UPDATE_CAMPAIGN_TYPE:\n            return {\n                ...state,\n                campaignType: action.payload\n            }\n\n        case SET_SELECTED_CAMPAIGN:\n            return {\n                ...state,\n                selectedCampaign: action.payload\n            }\n\n        case GET_USER:\n            return {\n                ...state,\n                userList: action.payload\n            }\n\n        default:\n            return newState;\n    }\n}\n\nexport default campaignReducer;\n","export const data = {\n    en:{\n        upcoming_capaign: \"Upcoming Campaigns\",\n        live_capaign: \"Live Campaigns\",\n        past_capaign: \"Past Campaigns\",\n        manage_capaign: \"Manage Campaigns\",\n        DATE: \"DATE\",\n        CAMPAIGN: \"CAMPAIGN\",\n        VIEW: \"VIEW\",\n        ACTIONS: \"ACTIONS\",\n        view_price: \"View Price\",\n        CSV: \"CSV\",\n        report: \"Report\",\n        schedule_again: \"Schedule Again\",\n        pricing: \"Pricing\",\n        close: \"Close\"\n    },\n    ger: {\n        upcoming_capaign: \"Kommende Kampagnen\",\n        live_capaign: \"Live-Kampagnen\",\n        past_capaign: \"Vergangene Kampagnen\",\n        manage_capaign: \"Kampagnen verwalten\",\n        DATE: \"DATUM\",\n        CAMPAIGN: \"KAMPAGNE\",\n        VIEW: \"AUSSICHT\",\n        ACTIONS: \"AKTIONEN\",\n        view_price: \"Preis anzeigen\",\n        CSV: \"CSV\",\n        report: \"Bericht\",\n        schedule_again: \"Erneut planen\",\n        pricing: \"Preisgestaltung\",\n        close: \"Schließen\"\n    }\n};","import {CHANGE_LANGUAGE} from \"src/store/actionConstant\";\nimport {data} from 'src/i18n';\n\nconst initialState = {\n    translation: data.en\n};\n\nconst localizationReducer = (state = initialState, action) => {\n    const newState = {...state};\n\n    switch (action.type) {\n        case CHANGE_LANGUAGE:\n            return {\n                ...state,\n                translation: data[action.payload]\n            }\n\n        default:\n            return newState;\n    }\n}\n\nexport default localizationReducer;","import {combineReducers} from \"redux\";\nimport campaignReducer from \"src/store/reducer/campaignReducer\";\nimport localizationReducer from \"src/store/reducer/localizationReducer\";\n\nconst rootReducer = combineReducers({\n    campaignReducer: campaignReducer,\n    localizationReducer: localizationReducer\n});\n\nexport default rootReducer;","import {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {logger} from 'redux-logger';\nimport rootReducer from \"src/store/reducer\";\n\nconst configureStore = () => {\n    const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n    return store;\n}\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport configureStore from \"./store/configureStore\";\n\nReactDOM.render(<Provider store={configureStore()}><Router basename={process.env.PUBLIC_URL}><App  /></Router></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}