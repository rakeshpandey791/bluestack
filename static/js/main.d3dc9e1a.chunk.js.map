{"version":3,"sources":["store/actionConstant.js","component/Header/Header.js","store/action/campaignAction.js","component/CampaignList/CampaignDetail/CampaignDetail.js","component/CampaignList/CampaignPricing/CampaignPricing.js","component/CampaignList/CampaignList.js","App.js","serviceWorker.js","store/reducer/campaignReducer.js","i18n.js","store/reducer/localizationReducer.js","store/reducer/index.js","store/configureStore.js","index.js"],"names":["CAMPAIGN_TYPE","Header","changeLanguage","event","props","target","value","className","src","process","alt","onChange","this","Component","connect","dispatch","language","type","payload","getCampaignListData","campaignReducerData","retObj","campaignList","campaignLSData","campaigns","data","todatDate","Date","setHours","campaignType","filter","campaign","campaignDate","createdOn","toString","setSelectedCampaign","campaignDetail","CampaignDetail","state","startDate","handleChange","date","scheduleAgain","id","moment","format","fromNow","image_url","name","region","href","onClick","translation","view_price","CSV","report","customInput","schedule_again","localizationReducer","getState","campaignReducer","dataToUpdateLocalStorage","i","length","localStorage","setItem","JSON","stringify","CampaignPricing","selectedCampaign","pricing","price","map","index","key","label","align","setSelectedCampaignToNull","close","CampaignList","changeTab","dataset","updateCampaignType","getCampaignList","manage_capaign","data-type","upcoming_capaign","live_capaign","past_capaign","DATE","CAMPAIGN","VIEW","ACTIONS","getItem","campaignObj","push","App","Fragment","path","exact","strict","render","Boolean","window","location","hostname","match","initialState","parse","action","newState","en","ger","rootReducer","combineReducers","configureStore","createStore","applyMiddleware","thunk","logger","ReactDOM","store","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3dc9e1a.chunk.js","sourcesContent":["export const GET_CAMPAIGN_LIST = 'GET_USER_LIST';\nexport const UPDATE_CAMPAIGN_TYPE = 'UPDATE_CAMPAIGN_TYPE';\nexport const SET_SELECTED_CAMPAIGN = 'SET_SELECTED_CAMPAIGN';\nexport const CHANGE_LANGUAGE = 'CHANGE_LANGUAGE';\nexport const CAMPAIGN_TYPE = {\n    UPCOMING: 'UPCOMING',\n    LIVE: 'LIVE',\n    PAST: 'PAST',\n};","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './Header.scss';\nimport {CHANGE_LANGUAGE} from \"./../../store/actionConstant\";\n\nclass Header extends Component {\n\n    changeLanguage = (event) => {\n        this.props.changeLanguage(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"header\">\n                <div></div>\n                <div>\n                    <img src={process.env.PUBLIC_URL + '/new-logo-white.png'} className=\"logo\" alt=\"header logo\"/>\n                </div>\n                <div className=\"pt-5\">\n                    <select onChange={this.changeLanguage}>\n                        <option value=\"en\">English</option>\n                        <option value=\"ger\">German</option>\n                    </select>\n                </div>\n                <div></div>\n            </div>\n        );\n    }\n}\n\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        changeLanguage: (language) => dispatch({type: CHANGE_LANGUAGE, payload: language})\n    }\n}\n\nexport default connect(null, mapActionToDispatch)(Header);","import {GET_CAMPAIGN_LIST, UPDATE_CAMPAIGN_TYPE, SET_SELECTED_CAMPAIGN, CAMPAIGN_TYPE} from \"../actionConstant\";\nimport campaigns from '../campaign';\n\n/*\n    Return data based on campaign Type(Upcoming, live and past) and will trigger when user switch tabs\n    Upcoming: In case of Upcoming, It will return all the record with createdOn date is greater than today date\n    Live: In case of Live, It will return all the record with createdOn date is equal to today date\n    Past: In case of Past, It will return all the record with createdOn date is less than today date\n */\nconst getCampaignListData = (campaignReducerData) => {\n    const retObj = {\n        campaignList: campaignReducerData.campaignLSData ? campaignReducerData.campaignLSData : campaigns.data\n    }\n    const todatDate = new Date();\n    todatDate.setHours(0,0,0,0);\n    switch (campaignReducerData.campaignType) {\n        case CAMPAIGN_TYPE.UPCOMING:\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate < campaignDate;\n            });\n            break;\n\n        case CAMPAIGN_TYPE.LIVE:\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate.toString() === campaignDate.toString();\n            });\n            break;\n\n        case CAMPAIGN_TYPE.PAST:\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate > campaignDate;\n            });\n            break;\n        default:\n            return true;\n\n    }\n    return retObj;\n}\n\n/*\n    Called first time when user reloads the browser\n */\nexport const getCampaignList = () => {\n    return (dispatch, getState) => {\n        if (!localStorage.getItem('campaignList')) {\n            const dataToUpdateLocalStorage = [];\n            for(let i=0; i<campaigns.data.length; i++) {\n                const campaignObj = campaigns.data[i];\n                dataToUpdateLocalStorage.push(campaignObj);\n            }\n            localStorage.setItem('campaignList', JSON.stringify(dataToUpdateLocalStorage));\n        }\n        const campaignReducerData = getState().campaignReducer;\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\n/*\n    Called when when user switch the tabs\n */\nexport const updateCampaignType = (campaignType) => {\n    return (dispatch, getState) => {\n        dispatch({type: UPDATE_CAMPAIGN_TYPE, payload: campaignType});\n        const campaignReducerData = getState().campaignReducer;\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\n/*\n    Called when user re-schedule campaign using calander\n */\nexport const scheduleAgain = (id, date) => {\n    return (dispatch, getState) => {\n        const campaignReducerData = getState().campaignReducer;\n\n        const dataToUpdateLocalStorage = campaignReducerData.campaignLSData ? campaignReducerData.campaignLSData : campaigns.data;\n        for(let i=0; i<dataToUpdateLocalStorage.length; i++) {\n            if (id === dataToUpdateLocalStorage[i].id) {\n                dataToUpdateLocalStorage[i].createdOn = date;\n            }\n        }\n        localStorage.setItem('campaignList', JSON.stringify(dataToUpdateLocalStorage));\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\n/*\n    Called when user click on View Price link to see pricing details\n */\nexport const setSelectedCampaign = (campaignDetail) => {\n    return (dispatch) => {\n        dispatch({type: SET_SELECTED_CAMPAIGN, payload: campaignDetail});\n    }\n}\n\n\n\n\n\n","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {setSelectedCampaign, scheduleAgain} from './../../../store/action/campaignAction';\n\nimport './CampaignDetail.scss';\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass CampaignDetail extends Component{\n\n    state = {\n        startDate: new Date()\n    };\n\n    handleChange = date => {\n        this.props.scheduleAgain(this.props.campaignDetail.id, date);\n    };\n\n    render() {\n        const ExampleCustomInput = ({ onClick }) => (\n            <button onClick={onClick}>\n                <a href>\n                    <img src={process.env.PUBLIC_URL + '/calendar.png'} className=\"img\" alt={this.props.campaignDetail.name} />\n                    <span>{this.props.translation.schedule_again}</span>\n\n                </a>\n            </button>\n        );\n        return (\n            <div className=\"list-row\">\n                <div></div>\n                <div className=\"list-data\">\n                    <div>\n                        <p>{moment(this.props.campaignDetail.createdOn).format('MMM YYYY, DD')}</p>\n                        <small>{moment(this.props.campaignDetail.createdOn).fromNow()}</small>\n                    </div>\n                    <div className=\"campaign-name\">\n                        <div><img src={process.env.PUBLIC_URL +'/' + this.props.campaignDetail.image_url} alt={this.props.campaignDetail.name} /></div>\n                        <div>\n                            <p>{this.props.campaignDetail.name}</p>\n                            <p><small>{this.props.campaignDetail.region}</small></p>\n                        </div>\n\n\n                    </div>\n                    <div>\n                        <a href onClick={() => this.props.setSelectedCampaign(this.props.campaignDetail)}>\n                            <img src={process.env.PUBLIC_URL + '/price.png'} className=\"img\" alt={this.props.campaignDetail.name}/>\n                            <span>{this.props.translation.view_price} </span>\n                        </a>\n                    </div>\n                    <div>\n                        <a href>\n                            <img src={process.env.PUBLIC_URL + '/file.png'} className=\"img\" alt={this.props.campaignDetail.name} />\n                            <span>{this.props.translation.CSV}</span>\n                        </a>\n                        <a href>\n                            <img src={process.env.PUBLIC_URL + '/statistics-report.png'} className=\"img\" alt={this.props.campaignDetail.name} />\n                            <span>{this.props.translation.report}</span>\n                        </a>\n                        {/*<a href>*/}\n                        {/*    <img src={process.env.PUBLIC_URL + '/calendar.png'} className=\"img\" alt={this.props.campaignDetail.name} />*/}\n                        {/*    <span>{this.props.translation.schedule_again}</span>*/}\n\n                        {/*</a>*/}\n                        <DatePicker\n                            onChange={this.handleChange}\n                            customInput={<ExampleCustomInput />}\n                        />\n\n                    </div>\n                </div>\n                <div></div>\n\n            </div>\n        );\n    }\n}\n\nconst mapPropsToDispatch = (state) => {\n    return {\n        translation: state.localizationReducer.translation\n    }\n}\n\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        setSelectedCampaign: (campaignDetail) => dispatch(setSelectedCampaign(campaignDetail)),\n        scheduleAgain: (id, date) => dispatch(scheduleAgain(id, date))\n    }\n}\n\nexport default connect(mapPropsToDispatch, mapActionToDispatch)(CampaignDetail);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './CampaignPricing.scss';\nimport {setSelectedCampaign} from './../../../store/action/campaignAction';\n\nclass CampaignPricing extends Component {\n\n    render() {\n        return (\n            <div id=\"myModal\" className=\"modal\">\n\n                <div className=\"modal-content\">\n                    <div className=\"compain-heading\">\n                        <div><img src={process.env.PUBLIC_URL + '/' +  this.props.selectedCampaign.image_url}\n                                  alt={this.props.selectedCampaign.name}/></div>\n                        <div>\n                            <p>{this.props.selectedCampaign.name}</p>\n                            <small>{this.props.selectedCampaign.region}</small>\n                        </div>\n                    </div>\n                    <h1>{this.props.translation.pricing}</h1>\n                    {\n                        this.props.selectedCampaign.price.map( (price, index) => (\n                            <div className=\"pricing\" key={index}>\n                                <div>{price.label}</div>\n                                <div>{price.value}</div>\n                            </div>\n                        ))\n                    }\n                    <div align=\"center\">\n                        <button type=\"button\" className=\"btn\" onClick={this.props.setSelectedCampaignToNull}>\n                            {this.props.translation.close}\n                        </button>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nconst mapPropsToDispatch = (state) => {\n    return {\n        translation: state.localizationReducer.translation\n    }\n}\n\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        setSelectedCampaignToNull: () => dispatch(setSelectedCampaign(null))\n    };\n}\n\nexport default connect(mapPropsToDispatch, mapActionToDispatch)(CampaignPricing);","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport './CampaignList.scss';\nimport {getCampaignList, updateCampaignType} from \"../../store/action/campaignAction\";\nimport CampaignDetail from \"./CampaignDetail/CampaignDetail\";\nimport CampaignPricing from \"./CampaignPricing/CampaignPricing\";\n\nclass CampaignList extends Component {\n    constructor() {\n        super();\n    }\n\n    componentDidMount() {\n        this.props.getCampaignList();\n    }\n\n    changeTab = (event) => {\n        if (event.target.dataset.type) {\n            this.props.updateCampaignType(event.target.dataset.type);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"campaign-container\">\n                <div></div>\n                <div>\n                    <div className=\"title\">\n                        <h1>{this.props.translation.manage_capaign}</h1>\n                    </div>\n                    <div className=\"tab-container\" onClick={this.changeTab}>\n                        <div className={`tab-item ' ${this.props.campaignType ===  'UPCOMING' ? 'active' :''}`}\n                             data-type=\"UPCOMING\">\n                            <a href className={this.props.campaignType ===  'UPCOMING' ? 'active' :''} data-type=\"UPCOMING\">\n                                {this.props.translation.upcoming_capaign}\n                            </a>\n                        </div>\n                        <div className={`tab-item ' ${this.props.campaignType ===  'LIVE' ? 'active' :''}`}\n                             data-type=\"LIVE\">\n                            <a href className={this.props.campaignType ===  'LIVE' ? 'active' :''} data-type=\"LIVE\">\n                                {this.props.translation.live_capaign}\n                            </a>\n                        </div>\n                        <div className={`tab-item ' ${this.props.campaignType ===  'PAST' ? 'active' :''}`}\n                             data-type=\"PAST\">\n                            <a href className={this.props.campaignType ===  'PAST' ? 'active' :''} data-type=\"PAST\">\n                                {this.props.translation.past_capaign}\n                            </a>\n                        </div>\n                    </div>\n                    <div className=\"data-container\">\n                        <div className=\"list-caption\">\n                            <div>{this.props.translation.DATE}</div>\n                            <div>{this.props.translation.CAMPAIGN}</div>\n                            <div>{this.props.translation.VIEW}</div>\n                            <div>{this.props.translation.ACTIONS}</div>\n                        </div>\n                        {\n                            this.props.campaignList.map( (campaign, index) => (\n                            <CampaignDetail campaignDetail = {campaign} key={index} />\n                            ))\n                        }\n                        {\n                            this.props.selectedCampaign ? (<CampaignPricing selectedCampaign={this.props.selectedCampaign}></CampaignPricing>) : ''\n                        }\n                    </div>\n                </div>\n                <div></div>\n            </div>\n        )\n    }\n}\n\nconst mapPropsToDispatch = (state) => {\n    return {\n        campaignList: state.campaignReducer.campaignList,\n        campaignType: state.campaignReducer.campaignType,\n        selectedCampaign: state.campaignReducer.selectedCampaign,\n        translation: state.localizationReducer.translation\n    }\n}\n\nconst mapActionToDispatch = (dispatch) => {\n    return {\n        getCampaignList: () => dispatch(getCampaignList()),\n        updateCampaignType: (campaignType) => dispatch(updateCampaignType(campaignType))\n    }\n}\n\nexport default connect(mapPropsToDispatch, mapActionToDispatch)(CampaignList);","import React from 'react';\nimport './App.scss';\nimport {Route} from 'react-router-dom';\nimport Header from './component/Header/Header';\nimport CampaignList from \"./component/CampaignList/CampaignList\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n        <Header></Header>\n          <Route path='/' exact strict render={() => {\n              return (<CampaignList/>)\n          }}/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {GET_CAMPAIGN_LIST, SET_SELECTED_CAMPAIGN, UPDATE_CAMPAIGN_TYPE, CAMPAIGN_TYPE} from \"../actionConstant\";\n\nconst initialState = {\n    campaignList: [],\n    campaignType: CAMPAIGN_TYPE.UPCOMING,\n    selectedCampaign: null,\n    campaignLSData: JSON.parse(localStorage.getItem('campaignList'))\n};\n\nconst campaignReducer = (state = initialState, action) => {\n    const newState = {...state};\n\n    switch (action.type) {\n        case GET_CAMPAIGN_LIST:\n            return {\n                ...state,\n                campaignList: action.payload.campaignList\n\n            }\n\n        case UPDATE_CAMPAIGN_TYPE:\n            return {\n                ...state,\n                campaignType: action.payload\n            }\n\n        case SET_SELECTED_CAMPAIGN:\n            return {\n                ...state,\n                selectedCampaign: action.payload\n            }\n\n        default:\n            return newState;\n    }\n}\n\nexport default campaignReducer;","export const data = {\n    en:{\n        upcoming_capaign: \"Upcoming Campaigns\",\n        live_capaign: \"Live Campaigns\",\n        past_capaign: \"Past Campaigns\",\n        manage_capaign: \"Manage Campaigns\",\n        DATE: \"DATE\",\n        CAMPAIGN: \"CAMPAIGN\",\n        VIEW: \"VIEW\",\n        ACTIONS: \"ACTIONS\",\n        view_price: \"View Price\",\n        CSV: \"CSV\",\n        report: \"Report\",\n        schedule_again: \"Schedule Again\",\n        pricing: \"Pricing\",\n        close: \"Close\"\n    },\n    ger: {\n        upcoming_capaign: \"Kommende Kampagnen\",\n        live_capaign: \"Live-Kampagnen\",\n        past_capaign: \"Vergangene Kampagnen\",\n        manage_capaign: \"Kampagnen verwalten\",\n        DATE: \"DATUM\",\n        CAMPAIGN: \"KAMPAGNE\",\n        VIEW: \"AUSSICHT\",\n        ACTIONS: \"AKTIONEN\",\n        view_price: \"Preis anzeigen\",\n        CSV: \"CSV\",\n        report: \"Bericht\",\n        schedule_again: \"Erneut planen\",\n        pricing: \"Preisgestaltung\",\n        close: \"Schließen\"\n    }\n};","import {CHANGE_LANGUAGE} from \"../actionConstant\";\nimport {data} from './../../i18n';\n\nconst initialState = {\n    translation: data.en\n};\n\nconst localizationReducer = (state = initialState, action) => {\n    const newState = {...state};\n\n    switch (action.type) {\n        case CHANGE_LANGUAGE:\n            return {\n                ...state,\n                translation: data[action.payload]\n            }\n\n        default:\n            return newState;\n    }\n}\n\nexport default localizationReducer;","import {combineReducers} from \"redux\";\nimport campaignReducer from \"./campaignReducer\";\nimport localizationReducer from \"./localizationReducer\";\n\nconst rootReducer = combineReducers({\n    campaignReducer: campaignReducer,\n    localizationReducer: localizationReducer\n});\n\nexport default rootReducer;","import {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {logger} from 'redux-logger';\nimport rootReducer from \"./reducer\";\n\nconst configureStore = () => {\n    const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n    return store;\n}\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport configureStore from \"./store/configureStore\";\n\nReactDOM.render(<Provider store={configureStore()}><Router basename={process.env.PUBLIC_URL}><App  /></Router></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}